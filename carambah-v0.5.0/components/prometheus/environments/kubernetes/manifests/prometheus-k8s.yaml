# InfoMetis v0.5.0 - Prometheus Kubernetes Deployment
# Deploys Prometheus Server, Alertmanager, and Node Exporter for monitoring

apiVersion: v1
kind: Namespace
metadata:
  name: infometis
  labels:
    app.kubernetes.io/name: infometis
---
# Prometheus PersistentVolume
apiVersion: v1
kind: PersistentVolume
metadata:
  name: prometheus-pv
  labels:
    app.kubernetes.io/part-of: infometis
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  storageClassName: local-storage
  hostPath:
    path: /tmp/prometheus-data
  persistentVolumeReclaimPolicy: Delete
---
# Alertmanager PersistentVolume
apiVersion: v1
kind: PersistentVolume
metadata:
  name: alertmanager-pv
  labels:
    app.kubernetes.io/part-of: infometis
spec:
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  storageClassName: local-storage
  hostPath:
    path: /tmp/alertmanager-data
  persistentVolumeReclaimPolicy: Delete
---
# Prometheus Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: infometis
  labels:
    app: prometheus-server
    app.kubernetes.io/part-of: infometis
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'infometis'
        replica: 'prometheus-server'

    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager-service:9093

    rule_files:
      - "infometis_alerts.yml"

    scrape_configs:
      # Prometheus itself
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

      # Node Exporter
      - job_name: 'node-exporter'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_endpoints_name]
            action: keep
            regex: node-exporter-service
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics

      # Kafka JMX metrics
      - job_name: 'kafka'
        static_configs:
          - targets: ['kafka-service:9308']
        metrics_path: /metrics

      # Flink JobManager
      - job_name: 'flink-jobmanager'
        static_configs:
          - targets: ['flink-jobmanager-service:8081']
        metrics_path: /metrics

      # Flink TaskManager
      - job_name: 'flink-taskmanager'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_endpoints_name]
            action: keep
            regex: flink-taskmanager-service
          - source_labels: [__meta_kubernetes_endpoint_port_name]
            action: keep
            regex: metrics

      # ksqlDB Server
      - job_name: 'ksqldb'
        static_configs:
          - targets: ['ksqldb-server-service:8088']
        metrics_path: /status/metrics

      # Elasticsearch
      - job_name: 'elasticsearch'
        static_configs:
          - targets: ['elasticsearch-service:9200']
        metrics_path: /_prometheus/metrics

      # Grafana
      - job_name: 'grafana'
        static_configs:
          - targets: ['grafana-service:3000']
        metrics_path: /api/metrics

      # Alertmanager
      - job_name: 'alertmanager'
        static_configs:
          - targets: ['alertmanager-service:9093']

      # Kubernetes API Server
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https

      # Kubernetes Nodes
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)
          - target_label: __address__
            replacement: kubernetes.default.svc:443
          - source_labels: [__meta_kubernetes_node_name]
            regex: (.+)
            target_label: __metrics_path__
            replacement: /api/v1/nodes/${1}/proxy/metrics

  infometis_alerts.yml: |
    groups:
    - name: infometis.rules
      rules:
      # Node-level alerts
      - alert: HighCPUUsage
        expr: 100 - (avg by (instance) (irate(node_cpu_seconds_total{mode="idle"}[5m])) * 100) > 80
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High CPU usage detected"
          description: "CPU usage is above 80% on {{ $labels.instance }}"

      - alert: HighMemoryUsage
        expr: (1 - (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes)) * 100 > 85
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High memory usage detected"
          description: "Memory usage is above 85% on {{ $labels.instance }}"

      - alert: DiskSpaceLow
        expr: (1 - (node_filesystem_avail_bytes / node_filesystem_size_bytes)) * 100 > 85
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "Low disk space"
          description: "Disk usage is above 85% on {{ $labels.instance }}"

      # Kafka alerts
      - alert: KafkaDown
        expr: up{job="kafka"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "Kafka is down"
          description: "Kafka service is not responding"

      # Flink alerts
      - alert: FlinkJobManagerDown
        expr: up{job="flink-jobmanager"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "Flink JobManager is down"
          description: "Flink JobManager is not responding"

      # ksqlDB alerts
      - alert: KsqlDBDown
        expr: up{job="ksqldb"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "ksqlDB Server is down"
          description: "ksqlDB Server is not responding"

      # Elasticsearch alerts
      - alert: ElasticsearchDown
        expr: up{job="elasticsearch"} == 0
        for: 1m
        labels:
          severity: critical
        annotations:
          summary: "Elasticsearch is down"
          description: "Elasticsearch service is not responding"
---
# Alertmanager Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: infometis
  labels:
    app: alertmanager
    app.kubernetes.io/part-of: infometis
data:
  alertmanager.yml: |
    global:
      smtp_smarthost: 'localhost:587'
      smtp_from: 'infometis@localhost'

    route:
      group_by: ['alertname', 'cluster', 'service']
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h
      receiver: 'web.hook'
      routes:
      - match:
          severity: critical
        receiver: 'critical-alerts'

    receivers:
    - name: 'web.hook'
      webhook_configs:
      - url: 'http://localhost:5001/webhook'
        send_resolved: true

    - name: 'critical-alerts'
      webhook_configs:
      - url: 'http://localhost:5001/webhook/critical'
        send_resolved: true

    inhibit_rules:
    - source_match:
        severity: 'critical'
      target_match:
        severity: 'warning'
      equal: ['alertname', 'cluster', 'service']
---
# Prometheus Server Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-server
  namespace: infometis
  labels:
    app: prometheus-server
    app.kubernetes.io/part-of: infometis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus-server
  template:
    metadata:
      labels:
        app: prometheus-server
        app.kubernetes.io/part-of: infometis
    spec:
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
      serviceAccountName: prometheus-server
      initContainers:
      - name: prometheus-data-permission-fix
        image: busybox:1.35
        imagePullPolicy: Never
        command: ['chown', '-R', '65534:65534', '/prometheus']
        volumeMounts:
        - name: prometheus-storage
          mountPath: /prometheus/
        securityContext:
          runAsUser: 0
      containers:
      - name: prometheus
        image: prom/prometheus:v2.47.0
        imagePullPolicy: Never
        ports:
        - containerPort: 9090
          name: web
        args:
          - --config.file=/etc/prometheus/prometheus.yml
          - --storage.tsdb.path=/prometheus/
          - --storage.tsdb.retention.time=15d
          - --web.console.libraries=/etc/prometheus/console_libraries
          - --web.console.templates=/etc/prometheus/consoles
          - --web.enable-lifecycle
          - --web.external-url=http://localhost/prometheus
          - --web.route-prefix=/
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/
        - name: prometheus-storage
          mountPath: /prometheus/
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
          requests:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 5
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-storage
        persistentVolumeClaim:
          claimName: prometheus-storage-claim
---
# Prometheus Server Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-server
  namespace: infometis
  labels:
    app: prometheus-server
    app.kubernetes.io/part-of: infometis
---
# Prometheus Server ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-server
  labels:
    app: prometheus-server
    app.kubernetes.io/part-of: infometis
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
# Prometheus Server ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-server
  labels:
    app: prometheus-server
    app.kubernetes.io/part-of: infometis
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-server
subjects:
- kind: ServiceAccount
  name: prometheus-server
  namespace: infometis
---
# Prometheus Server Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus-server-service
  namespace: infometis
  labels:
    app: prometheus-server
    app.kubernetes.io/part-of: infometis
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: web
  selector:
    app: prometheus-server
---
# Prometheus Storage PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-storage-claim
  namespace: infometis
  labels:
    app: prometheus-server
    app.kubernetes.io/part-of: infometis
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-storage
  resources:
    requests:
      storage: 10Gi
---
# Alertmanager Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
  namespace: infometis
  labels:
    app: alertmanager
    app.kubernetes.io/part-of: infometis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alertmanager
  template:
    metadata:
      labels:
        app: alertmanager
        app.kubernetes.io/part-of: infometis
    spec:
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
      initContainers:
      - name: alertmanager-data-permission-fix
        image: busybox:1.35
        imagePullPolicy: Never
        command: ['chown', '-R', '65534:65534', '/alertmanager']
        volumeMounts:
        - name: alertmanager-storage
          mountPath: /alertmanager
        securityContext:
          runAsUser: 0
      containers:
      - name: alertmanager
        image: prom/alertmanager:v0.25.1
        imagePullPolicy: Never
        ports:
        - containerPort: 9093
          name: web
        args:
          - --config.file=/etc/alertmanager/alertmanager.yml
          - --storage.path=/alertmanager
          - --web.external-url=http://localhost/alertmanager
          - --web.route-prefix=/
        volumeMounts:
        - name: alertmanager-config
          mountPath: /etc/alertmanager/
        - name: alertmanager-storage
          mountPath: /alertmanager
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 128Mi
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9093
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9093
          initialDelaySeconds: 30
          periodSeconds: 5
      volumes:
      - name: alertmanager-config
        configMap:
          name: alertmanager-config
      - name: alertmanager-storage
        persistentVolumeClaim:
          claimName: alertmanager-storage-claim
---
# Alertmanager Service
apiVersion: v1
kind: Service
metadata:
  name: alertmanager-service
  namespace: infometis
  labels:
    app: alertmanager
    app.kubernetes.io/part-of: infometis
spec:
  type: ClusterIP
  ports:
  - port: 9093
    targetPort: 9093
    protocol: TCP
    name: web
  selector:
    app: alertmanager
---
# Alertmanager Storage PVC
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: alertmanager-storage-claim
  namespace: infometis
  labels:
    app: alertmanager
    app.kubernetes.io/part-of: infometis
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-storage
  resources:
    requests:
      storage: 2Gi
---
# Node Exporter DaemonSet
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-exporter
  namespace: infometis
  labels:
    app: node-exporter
    app.kubernetes.io/part-of: infometis
spec:
  selector:
    matchLabels:
      app: node-exporter
  template:
    metadata:
      labels:
        app: node-exporter
        app.kubernetes.io/part-of: infometis
    spec:
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
      hostNetwork: true
      hostPID: true
      containers:
      - name: node-exporter
        image: prom/node-exporter:v1.6.1
        imagePullPolicy: Never
        ports:
        - containerPort: 9100
          name: metrics
        args:
          - --path.procfs=/host/proc
          - --path.sysfs=/host/sys
          - --path.rootfs=/host/root
          - --collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)
        volumeMounts:
        - name: proc
          mountPath: /host/proc
          readOnly: true
        - name: sys
          mountPath: /host/sys
          readOnly: true
        - name: root
          mountPath: /host/root
          mountPropagation: HostToContainer
          readOnly: true
        resources:
          limits:
            cpu: 200m
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 100Mi
        livenessProbe:
          httpGet:
            path: /
            port: 9100
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /
            port: 9100
          initialDelaySeconds: 30
          periodSeconds: 5
      volumes:
      - name: proc
        hostPath:
          path: /proc
      - name: sys
        hostPath:
          path: /sys
      - name: root
        hostPath:
          path: /
---
# Node Exporter Service
apiVersion: v1
kind: Service
metadata:
  name: node-exporter-service
  namespace: infometis
  labels:
    app: node-exporter
    app.kubernetes.io/part-of: infometis
spec:
  type: ClusterIP
  ports:
  - port: 9100
    targetPort: 9100
    protocol: TCP
    name: metrics
  selector:
    app: node-exporter