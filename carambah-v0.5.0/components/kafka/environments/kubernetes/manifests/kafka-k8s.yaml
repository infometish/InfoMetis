---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: kafka-pv
  labels:
    app.kubernetes.io/part-of: infometis
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Delete
  storageClassName: local-storage
  hostPath:
    path: /var/lib/infometis/kafka
    type: DirectoryOrCreate
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: kafka-pvc
  namespace: infometis
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: local-storage
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka
  namespace: infometis
  labels:
    app: kafka
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka
  template:
    metadata:
      labels:
        app: kafka
    spec:
      initContainers:
      - name: kafka-init
        image: busybox:1.35
        command: ['sh', '-c', 'mkdir -p /var/lib/kafka/data && chown -R 1000:1000 /var/lib/kafka']
        volumeMounts:
        - name: kafka-data
          mountPath: /var/lib/kafka
        securityContext:
          runAsUser: 0
      containers:
      - name: kafka
        image: confluentinc/cp-kafka:7.5.0
        imagePullPolicy: Never
        env:
        - name: KAFKA_NODE_ID
          value: "1"
        - name: KAFKA_PROCESS_ROLES
          value: "broker,controller"
        - name: KAFKA_CONTROLLER_QUORUM_VOTERS
          value: "1@localhost:9093"
        - name: KAFKA_LISTENERS
          value: "PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://kafka-service:9092"
        - name: KAFKA_CONTROLLER_LISTENER_NAMES
          value: "CONTROLLER"
        - name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
          value: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_TRANSACTION_STATE_LOG_MIN_ISR
          value: "1"
        - name: KAFKA_LOG_DIRS
          value: "/var/lib/kafka/data"
        - name: KAFKA_LOG_RETENTION_HOURS
          value: "168"
        - name: KAFKA_NUM_PARTITIONS
          value: "1"
        - name: KAFKA_DEFAULT_REPLICATION_FACTOR
          value: "1"
        - name: CLUSTER_ID
          value: "QZxtTAvfTj2CP05c9iiyiQ"
        ports:
        - name: kafka
          containerPort: 9092
        - name: controller
          containerPort: 9093
        volumeMounts:
        - name: kafka-data
          mountPath: /var/lib/kafka
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        readinessProbe:
          tcpSocket:
            port: 9092
          initialDelaySeconds: 30
          timeoutSeconds: 10
          periodSeconds: 10
        livenessProbe:
          tcpSocket:
            port: 9092
          initialDelaySeconds: 60
          timeoutSeconds: 10
          periodSeconds: 30
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
      volumes:
      - name: kafka-data
        persistentVolumeClaim:
          claimName: kafka-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-service
  namespace: infometis
  labels:
    app: kafka
spec:
  selector:
    app: kafka
  ports:
  - name: kafka
    port: 9092
    targetPort: 9092
  - name: controller
    port: 9093
    targetPort: 9093
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-nodeport
  namespace: infometis
  labels:
    app: kafka
spec:
  type: NodePort
  selector:
    app: kafka
  ports:
  - name: kafka
    port: 9092
    targetPort: 9092
    nodePort: 30092
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-rest-proxy
  namespace: infometis
  labels:
    app: kafka-rest-proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-rest-proxy
  template:
    metadata:
      labels:
        app: kafka-rest-proxy
    spec:
      containers:
      - name: kafka-rest-proxy
        image: confluentinc/cp-kafka-rest:7.5.0
        imagePullPolicy: Never
        env:
        - name: KAFKA_REST_HOST_NAME
          value: "kafka-rest-proxy"
        - name: KAFKA_REST_BOOTSTRAP_SERVERS
          value: "kafka-service:9092"
        - name: KAFKA_REST_LISTENERS
          value: "http://0.0.0.0:8082"
        ports:
        - name: rest-proxy
          containerPort: 8082
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        readinessProbe:
          httpGet:
            path: /
            port: 8082
          initialDelaySeconds: 30
          timeoutSeconds: 10
          periodSeconds: 30
        livenessProbe:
          httpGet:
            path: /
            port: 8082
          initialDelaySeconds: 60
          timeoutSeconds: 10
          periodSeconds: 30
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-rest-service
  namespace: infometis
  labels:
    app: kafka-rest-proxy
spec:
  selector:
    app: kafka-rest-proxy
  ports:
  - name: rest-proxy
    port: 8082
    targetPort: 8082
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-ui
  namespace: infometis
  labels:
    app: kafka-ui
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kafka-ui
  template:
    metadata:
      labels:
        app: kafka-ui
    spec:
      containers:
      - name: kafka-ui
        image: provectuslabs/kafka-ui:latest
        imagePullPolicy: Never
        env:
        - name: KAFKA_CLUSTERS_0_NAME
          value: "infometis-kafka"
        - name: KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS
          value: "kafka-service:9092"
        - name: SERVER_SERVLET_CONTEXT_PATH
          value: "/kafka-ui"
        - name: DYNAMIC_CONFIG_ENABLED
          value: "true"
        ports:
        - name: ui
          containerPort: 8080
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        readinessProbe:
          httpGet:
            path: /kafka-ui/actuator/health
            port: 8080
          initialDelaySeconds: 30
          timeoutSeconds: 10
          periodSeconds: 30
        livenessProbe:
          httpGet:
            path: /kafka-ui/actuator/health
            port: 8080
          initialDelaySeconds: 60
          timeoutSeconds: 10
          periodSeconds: 30
      tolerations:
      - key: node-role.kubernetes.io/master
        operator: Exists
        effect: NoSchedule
---
apiVersion: v1
kind: Service
metadata:
  name: kafka-ui-service
  namespace: infometis
  labels:
    app: kafka-ui
spec:
  selector:
    app: kafka-ui
  ports:
  - name: ui
    port: 8080
    targetPort: 8080
  type: ClusterIP
---
apiVersion: traefik.containo.us/v1alpha1
kind: Middleware
metadata:
  name: kafka-rest-stripprefix
  namespace: infometis
spec:
  stripPrefix:
    prefixes:
      - /kafka
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kafka-rest-ingress
  namespace: infometis
  annotations:
    kubernetes.io/ingress.class: "traefik"
    traefik.ingress.kubernetes.io/router.middlewares: infometis-kafka-rest-stripprefix@kubernetescrd
spec:
  rules:
  - http:
      paths:
      - path: /kafka
        pathType: Prefix
        backend:
          service:
            name: kafka-rest-service
            port:
              number: 8082
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kafka-ui-ingress
  namespace: infometis
  annotations:
    kubernetes.io/ingress.class: "traefik"
spec:
  rules:
  - http:
      paths:
      - path: /kafka-ui
        pathType: Prefix
        backend:
          service:
            name: kafka-ui-service
            port:
              number: 8080