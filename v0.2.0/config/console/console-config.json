{
  "title": "InfoMetis v0.2.0 Implementation Console",
  "version": "0.2.0",
  "description": "Guided implementation of InfoMetis with NiFi Registry and Git integration",
  "sections": [
    {
      "name": "Cleanup and Caching",
      "key": "c",
      "icon": "üßπ",
      "description": "Environment cleanup and image caching for v0.2.0",
      "steps": [
        {
          "name": "Full cleanup - remove entire InfoMetis deployment and start fresh",
          "script": "C1-cleanup-all.sh"
        },
        {
          "name": "Cache v0.2.0 images including Registry components",
          "script": "C2-cache-images.sh cache"
        }
      ]
    },
    {
      "name": "v0.1.0 Foundation",
      "key": "d",
      "icon": "üèóÔ∏è",
      "description": "Deploy condensed v0.1.0 foundation (cluster + NiFi)",
      "steps": [
        {
          "name": "Deploy k0s cluster and Traefik infrastructure",
          "script": "D1-deploy-v0.1.0-foundation.sh"
        },
        {
          "name": "Deploy NiFi with persistent storage",
          "script": "D2-deploy-v0.1.0-infometis.sh"
        },
        {
          "name": "Verify v0.1.0 foundation deployment",
          "script": "D3-verify-v0.1.0-foundation.sh"
        }
      ]
    },
    {
      "name": "Registry Implementation",
      "key": "i",
      "icon": "üóÇÔ∏è",
      "description": "Deploy and configure NiFi Registry with Git integration",
      "steps": [
        {
          "name": "Deploy NiFi Registry with persistent storage",
          "script": "I1-deploy-registry.sh"
        },
        {
          "name": "Configure Git integration for flow versioning",
          "script": "I2-configure-git-integration.sh"
        },
        {
          "name": "Connect NiFi to Registry for version control",
          "script": "I3-configure-registry-nifi.sh"
        },
        {
          "name": "Verify complete Registry integration",
          "script": "I4-verify-registry-setup.sh"
        }
      ]
    },
    {
      "name": "Test 1: End-to-End Integration",
      "key": "t1",
      "icon": "üß™",
      "description": "Comprehensive end-to-end testing of Registry integration",
      "steps": [
        {
          "name": "API-based cleanup and reset for consistent test environment",
          "script": "T1-01-full-cleanup-reset.sh"
        },
        {
          "name": "Verify clean state - environment ready for testing",
          "script": "T1-02-verify-clean-state.sh"
        },
        {
          "name": "Create test pipeline for Registry integration",
          "script": "T1-03-create-single-pipeline.sh"
        },
        {
          "name": "Verify pipeline creation and configuration",
          "script": "T1-04-verify-pipeline-creation.sh"
        },
        {
          "name": "Version pipeline in Registry with version control",
          "script": "T1-05-version-pipeline.sh"
        },
        {
          "name": "Verify pipeline storage in Registry",
          "script": "T1-06-verify-registry-storage.sh"
        },
        {
          "name": "Validate complete end-to-end Registry integration",
          "script": "T1-07-validate-end-to-end.sh"
        }
      ]
    }
  ],
  "urls": [
    {
      "name": "NiFi UI",
      "url": "http://localhost/nifi",
      "description": "Content-Aware Intelligence pipeline interface"
    },
    {
      "name": "NiFi Registry UI",
      "url": "http://localhost/nifi-registry",
      "description": "Flow version control and management"
    },
    {
      "name": "Traefik Dashboard",
      "url": "http://localhost:8080",
      "description": "Ingress controller management and routing"
    }
  ],
  "auth": {
    "nifi": {
      "username": "admin",
      "password": "infometis2024"
    }
  }
}