---
# NiFi Registry PersistentVolume
apiVersion: v1
kind: PersistentVolume
metadata:
  name: nifi-registry-pv
spec:
  capacity:
    storage: 5Gi
  accessModes:
  - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: local-storage
  hostPath:
    path: /var/lib/k0s/nifi-registry-data
    type: DirectoryOrCreate
---
# NiFi Registry PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nifi-registry-pvc
  namespace: infometis
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: local-storage
---
# NiFi Registry ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: nifi-registry-config
  namespace: infometis
data:
  nifi-registry.properties: |
    # Core Properties
    nifi.registry.web.http.host=0.0.0.0
    nifi.registry.web.http.port=18080
    nifi.registry.web.https.host=
    nifi.registry.web.https.port=
    
    # Database Properties
    nifi.registry.db.url=jdbc:h2:./database/nifi-registry-primary;AUTOCOMMIT=OFF;DB_CLOSE_ON_EXIT=FALSE;LOCK_MODE=3;LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE
    nifi.registry.db.driver.class=org.h2.Driver
    nifi.registry.db.driver.directory=
    nifi.registry.db.username=nifireg
    nifi.registry.db.password=nifireg
    nifi.registry.db.maxConnections=5
    nifi.registry.db.sql.debug=false
    
    # Extension Directories
    nifi.registry.extension.dir.default=./lib
    
    # Identity Mapping Properties
    nifi.registry.security.identity.mapping.pattern.dn=
    nifi.registry.security.identity.mapping.value.dn=
    nifi.registry.security.identity.mapping.transform.dn=NONE
    
    # Group Mapping Properties
    nifi.registry.security.group.mapping.pattern.anygroup=
    nifi.registry.security.group.mapping.value.anygroup=
    nifi.registry.security.group.mapping.transform.anygroup=NONE
    
    # Providers Properties
    nifi.registry.providers.configuration.file=./conf/providers.xml
    
    # Extensions Working Directory
    nifi.registry.extensions.working.directory=./work/extensions
    
    # Kerberos Properties
    nifi.registry.kerberos.default.realm=
    nifi.registry.kerberos.service.principal=
    nifi.registry.kerberos.service.keytab.location=
    nifi.registry.kerberos.spnego.principal=
    nifi.registry.kerberos.spnego.keytab.location=
    nifi.registry.kerberos.authentication.expiration=12 hours
    
    # LDAP Properties
    nifi.registry.security.ldap.manager.dn=
    nifi.registry.security.ldap.manager.password=
    nifi.registry.security.ldap.tls.keystore=
    nifi.registry.security.ldap.tls.keystorePassword=
    nifi.registry.security.ldap.tls.keystoreType=
    nifi.registry.security.ldap.tls.truststore=
    nifi.registry.security.ldap.tls.truststorePassword=
    nifi.registry.security.ldap.tls.truststoreType=
    
    # Security Properties - Single User Authentication
    nifi.registry.security.authorizer=single-user-authorizer
    nifi.registry.security.authorizers.configuration.file=./conf/authorizers.xml
    nifi.registry.security.identity.provider=single-user-provider
    nifi.registry.security.identity.providers.configuration.file=./conf/identity-providers.xml
  identity-providers.xml: |
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <identityProviders>
        <provider>
            <identifier>single-user-provider</identifier>
            <class>org.apache.nifi.registry.security.identity.provider.SingleUserLoginIdentityProvider</class>
            <property name="Username">admin</property>
            <property name="Password">adminadminadmin</property>
        </provider>
    </identityProviders>
  authorizers.xml: |
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <authorizers>
        <authorizer>
            <identifier>single-user-authorizer</identifier>
            <class>org.apache.nifi.registry.security.authorization.SingleUserAuthorizer</class>
        </authorizer>
    </authorizers>
---
# NiFi Registry Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nifi-registry
  namespace: infometis
  labels:
    app: nifi-registry
    version: v0.3.0
    app.kubernetes.io/part-of: infometis
    app.kubernetes.io/version: v0.3.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nifi-registry
  template:
    metadata:
      labels:
        app: nifi-registry
        version: v0.3.0
        app.kubernetes.io/part-of: infometis
        app.kubernetes.io/version: v0.3.0
    spec:
      tolerations:
      - effect: NoSchedule
        key: node-role.kubernetes.io/master
      - effect: NoSchedule
        key: node-role.kubernetes.io/control-plane
      initContainers:
      - name: fix-permissions
        image: busybox:1.35
        command: ['sh', '-c']
        args:
        - |
          chown -R 1000:1000 /opt/nifi-registry/database
          chown -R 1000:1000 /opt/nifi-registry/flow_storage
          chown -R 1000:1000 /opt/nifi-registry/conf
          chown -R 1000:1000 /opt/nifi-registry/logs
          chmod -R 755 /opt/nifi-registry/
        volumeMounts:
        - name: registry-data
          mountPath: /opt/nifi-registry/database
          subPath: database
        - name: registry-data
          mountPath: /opt/nifi-registry/flow_storage
          subPath: flow_storage
        - name: registry-data
          mountPath: /opt/nifi-registry/conf
          subPath: conf
        - name: registry-data
          mountPath: /opt/nifi-registry/logs
          subPath: logs
      containers:
      - name: nifi-registry
        image: apache/nifi-registry:1.23.2
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 18080
          name: http
        env:
        - name: NIFI_REGISTRY_WEB_HTTP_PORT
          value: "18080"
        - name: NIFI_REGISTRY_WEB_HTTP_HOST
          value: "0.0.0.0"
        - name: NIFI_REGISTRY_DB_DIR
          value: "/opt/nifi-registry/database"
        - name: NIFI_REGISTRY_FLOW_STORAGE_DIR
          value: "/opt/nifi-registry/flow_storage"
        - name: NIFI_REGISTRY_GIT_REMOTE
          value: ""
        - name: NIFI_REGISTRY_GIT_USER
          value: "nifi-registry"
        - name: NIFI_REGISTRY_GIT_PASSWORD
          value: ""
        volumeMounts:
        - name: registry-data
          mountPath: /opt/nifi-registry/database
          subPath: database
        - name: registry-data
          mountPath: /opt/nifi-registry/flow_storage
          subPath: flow_storage
        - name: registry-data
          mountPath: /opt/nifi-registry/conf
          subPath: conf
        - name: registry-data
          mountPath: /opt/nifi-registry/logs
          subPath: logs
        - name: registry-config
          mountPath: /opt/nifi-registry/conf/nifi-registry.properties
          subPath: nifi-registry.properties
        - name: registry-config
          mountPath: /opt/nifi-registry/conf/identity-providers.xml
          subPath: identity-providers.xml
        - name: registry-config
          mountPath: /opt/nifi-registry/conf/authorizers.xml
          subPath: authorizers.xml
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        readinessProbe:
          httpGet:
            path: /nifi-registry/
            port: 18080
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
        livenessProbe:
          httpGet:
            path: /nifi-registry/
            port: 18080
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 60
          timeoutSeconds: 10
      volumes:
      - name: registry-data
        persistentVolumeClaim:
          claimName: nifi-registry-pvc
      - name: registry-config
        configMap:
          name: nifi-registry-config
---
# NiFi Registry Service
apiVersion: v1
kind: Service
metadata:
  name: nifi-registry-service
  namespace: infometis
  labels:
    app: nifi-registry
    version: v0.3.0
spec:
  selector:
    app: nifi-registry
  ports:
  - name: http
    port: 18080
    targetPort: 18080
    protocol: TCP
  type: ClusterIP
---
# NiFi Registry Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nifi-registry-ingress
  namespace: infometis
  labels:
    app: nifi-registry
    version: v0.3.0
  annotations:
    kubernetes.io/ingress.class: traefik
spec:
  rules:
  - host: localhost
    http:
      paths:
      - path: /nifi-registry-api
        pathType: Prefix
        backend:
          service:
            name: nifi-registry-service
            port:
              number: 18080
      - path: /nifi-registry
        pathType: Exact
        backend:
          service:
            name: nifi-registry-service
            port:
              number: 18080
      - path: /nifi-registry/
        pathType: Prefix
        backend:
          service:
            name: nifi-registry-service
            port:
              number: 18080
  - host: nifi-registry.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nifi-registry-service
            port:
              number: 18080